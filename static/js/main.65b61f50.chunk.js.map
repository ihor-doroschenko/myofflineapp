{"version":3,"sources":["components/Buttons.js","components/MainForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","button","margin","spacing","Buttons","handleSubmit","downloadCSV","downloadPhoto","classes","Box","Button","variant","color","className","endIcon","onClick","MainForm","formData","handleInputChange","handlePhotoChange","display","flexDirection","padding","height","TextField","required","style","width","label","name","value","streckennummer","onChange","alignItems","justifyContent","Typography","textAlign","id","paddingRight","type","placeholder","km","FormControl","component","RadioGroup","row","seite","handleChange","FormControlLabel","control","Radio","sonstiges","Input","accept","root","flexWrap","backgroundColor","App","useState","photo","setFormData","submissions","setSubmissions","useEffect","storedData","localStorage","getItem","parsedData","JSON","parse","setItem","stringify","React","useCallback","el","link","document","createElement","href","download","click","classnames","Paper","elevation","paper","e","target","files","reader","FileReader","onload","event","base64Photo","result","readAsDataURL","csvContent","map","entry","join","encodedUri","encodeURI","setAttribute","body","appendChild","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65b61f50.chunk.js","sourcesContent":["import { Box, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst Buttons = ({ handleSubmit, downloadCSV, downloadPhoto }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box>\r\n      <Button\r\n        variant='contained'\r\n        color='primary'\r\n        className={classes.button}\r\n        endIcon={<SendIcon />}\r\n        onClick={handleSubmit}>\r\n        Abschicken\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <Button variant='contained' color='primary' onClick={() => downloadCSV()}>\r\n        Download All Data\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <Button variant='contained' color='primary' onClick={() => downloadPhoto()}>\r\n        Download Photo\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import {\r\n  Box,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport Input from '@material-ui/core/Input';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React from 'react';\r\n\r\nconst MainForm = ({ formData, handleInputChange, handlePhotoChange }) => {\r\n  return (\r\n    <Box display='flex' flexDirection='column'>\r\n      <Box padding='5px' height='50px'>\r\n        <TextField\r\n          required\r\n          style={{ width: '100%' }}\r\n          label='Streckennummer'\r\n          name='streckennummer'\r\n          value={formData.streckennummer}\r\n          onChange={handleInputChange}\r\n        />\r\n      </Box>\r\n      <Box\r\n        display='flex'\r\n        flexDirection='row'\r\n        alignItems='flex-end'\r\n        justifyContent='flex-start'\r\n        height='50px'>\r\n        <Typography style={{ padding: 6, width: '100%', textAlign: 'left' }}>\r\n          Kilometrierung\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box display='flex' flexDirection='row' alignItems='center' padding='5px' height='50px'>\r\n        <TextField\r\n          required\r\n          label='Kilometrierung'\r\n          id='km'\r\n          style={{ paddingRight: '5px' }}\r\n          name='km'\r\n          type='number'\r\n          placeholder='z.B.145'\r\n          value={formData.km}\r\n          onChange={handleInputChange}\r\n        />\r\n        <TextField name='meters' type='number' placeholder='02' onChange={handleInputChange} />\r\n      </Box>\r\n\r\n      <Box\r\n        display='flex'\r\n        flexDirection='row'\r\n        alignItems='flex-end'\r\n        justifyContent='flex-start'\r\n        height='50px'>\r\n        <Typography style={{ padding: 6, width: '100%', textAlign: 'left' }}>Seite</Typography>\r\n      </Box>\r\n\r\n      <FormControl component='fieldset'>\r\n        <RadioGroup\r\n          row\r\n          required\r\n          id='seite'\r\n          name='seite'\r\n          value={formData.seite}\r\n          onChange={formData.handleChange}>\r\n          <FormControlLabel value='L' control={<Radio />} label='L' />\r\n          <FormControlLabel value='R' control={<Radio />} label='R' />\r\n        </RadioGroup>\r\n      </FormControl>\r\n      <TextField\r\n        label='Sonstiges'\r\n        id='sonstiges'\r\n        name='sonstiges'\r\n        value={formData.sonstiges}\r\n        onChange={formData.handleChange}\r\n      />\r\n\r\n      <Input\r\n        required\r\n        type='file'\r\n        name='photo'\r\n        accept='image/*;capture=camera'\r\n        onChange={handlePhotoChange}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainForm;\r\n","import { Box, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport classnames from 'classnames';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Buttons from './components/Buttons';\r\nimport MainForm from './components/MainForm';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexWrap: 'wrap',\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: '#f4f4f4',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    '& > *': {\r\n      padding: '20px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n    },\r\n  },\r\n}));\r\n\r\nconst LOCAL_STORAGE_KEY = 'data';\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [formData, setFormData] = useState({\r\n    streckennummer: '',\r\n    photo: null,\r\n  });\r\n\r\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\r\n\r\n  useEffect(() => {\r\n    // Load data from local storage\r\n    const storedData = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    if (storedData) {\r\n      const parsedData = JSON.parse(storedData);\r\n      setSubmissions(parsedData);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update local storage whenever the submissions array changes\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(submissions));\r\n  }, [submissions]);\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handlePhotoChange = e => {\r\n    const photo = e.target.files[0];\r\n    setFormData({\r\n      ...formData,\r\n      photo,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const reader = new FileReader();\r\n    reader.onload = event => {\r\n      const base64Photo = event.target.result;\r\n      // Append new submission to the array\r\n      setSubmissions([...submissions, { ...formData, photo: base64Photo }]);\r\n      // Save to local storage each time the user submits\r\n      localStorage.setItem(\r\n        LOCAL_STORAGE_KEY,\r\n        JSON.stringify([...submissions, { ...formData, photo: base64Photo }])\r\n      );\r\n    };\r\n    reader.readAsDataURL(formData.photo);\r\n  };\r\n\r\n  const downloadPhoto = React.useCallback(() => {\r\n    for (let el of submissions) {\r\n      const link = document.createElement('a');\r\n      link.href = el.photo;\r\n      link.download = `${el.streckennummer}.png`;\r\n      link.click();\r\n    }\r\n  }, [submissions]);\r\n\r\n  const downloadCSV = () => {\r\n    // Generate CSV content\r\n    const csvContent =\r\n      'data:text/csv;charset=utf-8,' +\r\n      'Streckennummer,Photo\\n' +\r\n      submissions.map(entry => `\"${entry.streckennummer}\",${entry.photo}\\n`).join('');\r\n\r\n    // Create and trigger a download link\r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement('a');\r\n    link.setAttribute('href', encodedUri);\r\n    link.setAttribute('download', 'data.csv');\r\n    document.body.appendChild(link);\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div className={classnames(classes.root, 'appWrapper')}>\r\n      <Paper elevation={3} classes={classes.paper}>\r\n        <Box>\r\n          <Typography style={{ padding: 16 }} variant='h4'>\r\n            Außendienst App\r\n          </Typography>\r\n        </Box>\r\n        <MainForm\r\n          formData={formData}\r\n          handleInputChange={handleInputChange}\r\n          handlePhotoChange={handlePhotoChange}\r\n        />\r\n        <Buttons\r\n          handleSubmit={handleSubmit}\r\n          downloadCSV={downloadCSV}\r\n          downloadPhoto={downloadPhoto}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}